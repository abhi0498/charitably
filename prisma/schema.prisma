// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Donation  Donation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Organization {
  id              String           @id @default(uuid()) @map("_id")
  name            String
  description     String
  taxId           String           @unique
  verified        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  donations       Donation[]
  expenses        Expense[]
  events          Event[]
  fundingRequests FundingRequest[]
}

model Donation {
  id               String           @id @default(uuid()) @map("_id")
  amount           Float
  type             DonationType
  remainingBalance Float
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  organization     Organization     @relation(fields: [orgId], references: [id])
  orgId            String
  event            Event?           @relation(fields: [eventId], references: [id])
  eventId          String?
  fundingRequest   FundingRequest?  @relation(fields: [requestId], references: [id])
  requestId        String?
  expenseMappings  ExpenseMapping[]
}

model Expense {
  id           String           @id @default(uuid()) @map("_id")
  amount       Float
  category     ExpenseCategory
  description  String
  createdAt    DateTime         @default(now())
  receipts     String[] // URLs to receipt images
  organization Organization     @relation(fields: [orgId], references: [id])
  orgId        String
  mappings     ExpenseMapping[]
}

model ExpenseMapping {
  id         String   @id @default(uuid()) @map("_id")
  proportion Float
  donation   Donation @relation(fields: [donationId], references: [id])
  donationId String
  expense    Expense  @relation(fields: [expenseId], references: [id])
  expenseId  String
}

model Event {
  id            String       @id @default(uuid()) @map("_id")
  title         String
  description   String
  goal          Float
  currentAmount Float        @default(0)
  startDate     DateTime
  endDate       DateTime
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  donations     Donation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model FundingRequest {
  id            String       @id @default(uuid()) @map("_id")
  title         String
  description   String
  goal          Float
  currentAmount Float        @default(0)
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  donations     Donation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum DonationType {
  GENERAL
  SPECIFIC
}

enum ExpenseCategory {
  FOOD
  CLOTHING
  MEDICAL
  EDUCATION
  OPERATIONS
  OTHER
}
