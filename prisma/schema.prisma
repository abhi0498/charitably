// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String        @unique
  name           String?
  image          String?
  role           Role          @default(USER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  emailVerified  DateTime?
  donations      Donation[]
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  Transaction    Transaction[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  mission         String?
  taxId           String           @unique
  verified        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  imageUrl        String?
  donations       Donation[]
  expenses        Expense[]
  events          Event[]
  fundingRequests FundingRequest[]
  users           User[]
  updates         Update[]
  gallery         Gallery[]
  Transaction     Transaction[]
}

model Gallery {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  createdAt    DateTime     @default(now())
  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.ObjectId
  imageUrl     String
}

model Update {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  createdAt    DateTime     @default(now())
  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @db.ObjectId
}

model Donation {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  type             DonationType
  remainingBalance Float
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id])
  userId           String           @db.ObjectId
  organization     Organization     @relation(fields: [orgId], references: [id])
  orgId            String           @db.ObjectId
  event            Event?           @relation(fields: [eventId], references: [id])
  eventId          String?          @db.ObjectId
  fundingRequest   FundingRequest?  @relation(fields: [requestId], references: [id])
  requestId        String?          @db.ObjectId
  expenseMappings  ExpenseMapping[]
}

model Expense {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  category     ExpenseCategory
  description  String
  createdAt    DateTime         @default(now())
  receipts     String[] // URLs to receipt images
  organization Organization     @relation(fields: [orgId], references: [id])
  orgId        String           @db.ObjectId
  mappings     ExpenseMapping[]
}

model ExpenseMapping {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  proportion Float
  donation   Donation @relation(fields: [donationId], references: [id])
  donationId String   @db.ObjectId
  expense    Expense  @relation(fields: [expenseId], references: [id])
  expenseId  String   @db.ObjectId
}

model Event {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  goal          Float
  currentAmount Float        @default(0)
  startDate     DateTime
  endDate       DateTime
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String       @db.ObjectId
  donations     Donation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model FundingRequest {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  goal          Float
  currentAmount Float        @default(0)
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String       @db.ObjectId
  isClosed      Boolean      @default(false)
  donations     Donation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model OrganizationApplication {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  mission     String
  taxId       String
  adminEmail  String
  adminName   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  status      ApplicationStatus @default(PENDING)
}

model Transaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  status         TransactionStatus
  upiId          String // Merchant's UPI ID
  reference      String            @unique // Generated reference for tracking
  description    String?
  userId         String            @db.ObjectId
  user           User              @relation(fields: [userId], references: [id])
  organizationId String            @db.ObjectId
  organization   Organization      @relation(fields: [organizationId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum TransactionStatus {
  INITIATED
  COMPLETED
  FAILED
  PENDING_VERIFICATION
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DonationType {
  GENERAL
  SPECIFIC
}

enum ExpenseCategory {
  FOOD
  CLOTHING
  MEDICAL
  EDUCATION
  OPERATIONS
  OTHER
}

enum Role {
  USER
  ADMIN
}
